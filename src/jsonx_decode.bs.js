// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_float = require("bs-platform/lib/js/caml_float.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Dict = $$Map.Make([$$String.compare]);

function is_int(v) {
  var c = Caml_float.caml_classify_float(Caml_float.caml_modf_float(v)[0]);
  return +(c === /* FP_zero */2);
}

function identity(x) {
  return x;
}

function decode_string(param, s) {
  try {
    var json = JSON.parse(s);
    try {
      return /* Ok */Block.__(0, [Curry._1(param[0], /* tuple */[
                      json,
                      identity
                    ])]);
    }
    catch (raw_exn){
      var exn = Js_exn.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.failure) {
        return /* Error */Block.__(1, [exn[1]]);
      } else {
        throw exn;
      }
    }
  }
  catch (exn$1){
    return /* Error */Block.__(1, [Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "failed to decode json string: ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "failed to decode json string: %s"
                      ]), s)]);
  }
}

var string = /* Decoder */[(function (param) {
      var json = param[0];
      var match = Js_json.classify(json);
      var exit = 0;
      if (typeof match === "number" || match.tag) {
        exit = 1;
      } else {
        return Curry._1(param[1], match[0]);
      }
      if (exit === 1) {
        return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "failed to decode json as string: ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "failed to decode json as string: %s"
                          ]), JSON.stringify(json)));
      }
      
    })];

var bool = /* Decoder */[(function (param) {
      var value = param[1];
      var json = param[0];
      var match = Js_json.classify(json);
      var exit = 0;
      if (typeof match === "number") {
        switch (match) {
          case 0 : 
              return Curry._1(value, /* false */0);
          case 1 : 
              return Curry._1(value, /* true */1);
          case 2 : 
              exit = 1;
              break;
          
        }
      } else {
        exit = 1;
      }
      if (exit === 1) {
        return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "failed to decode json as bool: ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "failed to decode json as bool: %s"
                          ]), JSON.stringify(json)));
      }
      
    })];

var $$int = /* Decoder */[(function (param) {
      var json = param[0];
      var fail = function () {
        return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "failed to decode json as int: ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "failed to decode json as int: %s"
                          ]), JSON.stringify(json)));
      };
      var match = Js_json.classify(json);
      if (typeof match === "number" || match.tag !== 1) {
        return fail(/* () */0);
      } else {
        var f = match[0];
        if (is_int(f)) {
          return Curry._1(param[1], f | 0);
        } else {
          return fail(/* () */0);
        }
      }
    })];

var $$float = /* Decoder */[(function (param) {
      var json = param[0];
      var match = Js_json.classify(json);
      var exit = 0;
      if (typeof match === "number" || match.tag !== 1) {
        exit = 1;
      } else {
        return Curry._1(param[1], match[0]);
      }
      if (exit === 1) {
        return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                            /* String_literal */Block.__(11, [
                                "failed to decode json as float: ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ]),
                            "failed to decode json as float: %s"
                          ]), JSON.stringify(json)));
      }
      
    })];

function $$null(sub_value) {
  return /* Decoder */[(function (param) {
              var json = param[0];
              var match = Js_json.classify(json);
              var exit = 0;
              if (typeof match === "number" && match >= 2) {
                return Curry._1(param[1], sub_value);
              } else {
                exit = 1;
              }
              if (exit === 1) {
                return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "failed to decode json as null: ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ]),
                                    "failed to decode json as null: %s"
                                  ]), JSON.stringify(json)));
              }
              
            })];
}

function optional(param) {
  var decode = param[0];
  return /* Decoder */[(function (param) {
              var value = param[1];
              try {
                return Curry._1(decode, /* tuple */[
                            param[0],
                            (function (x) {
                                return Curry._1(value, /* Some */[x]);
                              })
                          ]);
              }
              catch (exn){
                return Curry._1(value, /* None */0);
              }
            })];
}

function one_of(decoders) {
  return /* Decoder */[(function (param) {
              var value = param[1];
              var json = param[0];
              var _ds = decoders;
              while(true) {
                var ds = _ds;
                if (ds) {
                  try {
                    return Curry._1(ds[0][0], /* tuple */[
                                json,
                                value
                              ]);
                  }
                  catch (exn){
                    _ds = ds[1];
                    continue ;
                    
                  }
                } else {
                  return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                                      /* String_literal */Block.__(11, [
                                          "failed to decode json using any one of the provided decoders: ",
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* End_of_format */0
                                            ])
                                        ]),
                                      "failed to decode json using any one of the provided decoders: %s"
                                    ]), JSON.stringify(json)));
                }
              };
            })];
}

function map(sub_value, param) {
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var v1 = Curry._1(d1, /* tuple */[
                    param[0],
                    identity
                  ]);
              return Curry._1(param[1], Curry._1(sub_value, v1));
            })];
}

function map2(sub_value, param, param$1) {
  var d2 = param$1[0];
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var v2 = Curry._1(d2, /* tuple */[
                    json,
                    identity
                  ]);
              return Curry._1(param[1], Curry._2(sub_value, v1, v2));
            })];
}

function map3(sub_value, param, param$1, param$2) {
  var d3 = param$2[0];
  var d2 = param$1[0];
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var v2 = Curry._1(d2, /* tuple */[
                    json,
                    identity
                  ]);
              var v3 = Curry._1(d3, /* tuple */[
                    json,
                    identity
                  ]);
              return Curry._1(param[1], Curry._3(sub_value, v1, v2, v3));
            })];
}

function map4(sub_value, param, param$1, param$2, param$3) {
  var d4 = param$3[0];
  var d3 = param$2[0];
  var d2 = param$1[0];
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var v2 = Curry._1(d2, /* tuple */[
                    json,
                    identity
                  ]);
              var v3 = Curry._1(d3, /* tuple */[
                    json,
                    identity
                  ]);
              var v4 = Curry._1(d4, /* tuple */[
                    json,
                    identity
                  ]);
              return Curry._1(param[1], Curry._4(sub_value, v1, v2, v3, v4));
            })];
}

function map5(sub_value, param, param$1, param$2, param$3, param$4) {
  var d5 = param$4[0];
  var d4 = param$3[0];
  var d3 = param$2[0];
  var d2 = param$1[0];
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var v2 = Curry._1(d2, /* tuple */[
                    json,
                    identity
                  ]);
              var v3 = Curry._1(d3, /* tuple */[
                    json,
                    identity
                  ]);
              var v4 = Curry._1(d4, /* tuple */[
                    json,
                    identity
                  ]);
              var v5 = Curry._1(d5, /* tuple */[
                    json,
                    identity
                  ]);
              return Curry._1(param[1], Curry._5(sub_value, v1, v2, v3, v4, v5));
            })];
}

function map6(sub_value, param, param$1, param$2, param$3, param$4, param$5) {
  var d6 = param$5[0];
  var d5 = param$4[0];
  var d4 = param$3[0];
  var d3 = param$2[0];
  var d2 = param$1[0];
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var v2 = Curry._1(d2, /* tuple */[
                    json,
                    identity
                  ]);
              var v3 = Curry._1(d3, /* tuple */[
                    json,
                    identity
                  ]);
              var v4 = Curry._1(d4, /* tuple */[
                    json,
                    identity
                  ]);
              var v5 = Curry._1(d5, /* tuple */[
                    json,
                    identity
                  ]);
              var v6 = Curry._1(d6, /* tuple */[
                    json,
                    identity
                  ]);
              return Curry._1(param[1], Curry._6(sub_value, v1, v2, v3, v4, v5, v6));
            })];
}

function map7(sub_value, param, param$1, param$2, param$3, param$4, param$5, param$6) {
  var d7 = param$6[0];
  var d6 = param$5[0];
  var d5 = param$4[0];
  var d4 = param$3[0];
  var d3 = param$2[0];
  var d2 = param$1[0];
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var v2 = Curry._1(d2, /* tuple */[
                    json,
                    identity
                  ]);
              var v3 = Curry._1(d3, /* tuple */[
                    json,
                    identity
                  ]);
              var v4 = Curry._1(d4, /* tuple */[
                    json,
                    identity
                  ]);
              var v5 = Curry._1(d5, /* tuple */[
                    json,
                    identity
                  ]);
              var v6 = Curry._1(d6, /* tuple */[
                    json,
                    identity
                  ]);
              var v7 = Curry._1(d7, /* tuple */[
                    json,
                    identity
                  ]);
              return Curry._1(param[1], Curry._7(sub_value, v1, v2, v3, v4, v5, v6, v7));
            })];
}

function map8(sub_value, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
  var d8 = param$7[0];
  var d7 = param$6[0];
  var d6 = param$5[0];
  var d5 = param$4[0];
  var d4 = param$3[0];
  var d3 = param$2[0];
  var d2 = param$1[0];
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var v2 = Curry._1(d2, /* tuple */[
                    json,
                    identity
                  ]);
              var v3 = Curry._1(d3, /* tuple */[
                    json,
                    identity
                  ]);
              var v4 = Curry._1(d4, /* tuple */[
                    json,
                    identity
                  ]);
              var v5 = Curry._1(d5, /* tuple */[
                    json,
                    identity
                  ]);
              var v6 = Curry._1(d6, /* tuple */[
                    json,
                    identity
                  ]);
              var v7 = Curry._1(d7, /* tuple */[
                    json,
                    identity
                  ]);
              var v8 = Curry._1(d8, /* tuple */[
                    json,
                    identity
                  ]);
              return Curry._1(param[1], Curry._8(sub_value, v1, v2, v3, v4, v5, v6, v7, v8));
            })];
}

function nullable(decoder) {
  return /* Decoder */[(function (state) {
              var match = $$null(/* None */0);
              var match$1 = map((function (x) {
                      return /* Some */[x];
                    }), decoder);
              try {
                return Curry._1(match[0], state);
              }
              catch (exn){
                return Curry._1(match$1[0], state);
              }
            })];
}

function list(param) {
  var decode = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var match = Js_json.classify(json);
              var exit = 0;
              if (typeof match === "number" || match.tag !== 3) {
                exit = 1;
              } else {
                return Curry._1(param[1], List.map((function (json$prime) {
                                  return Curry._1(decode, /* tuple */[
                                              json$prime,
                                              identity
                                            ]);
                                }), $$Array.to_list(match[0])));
              }
              if (exit === 1) {
                return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "failed to decode json as a list: ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ]),
                                    "failed to decode json as a list: %s"
                                  ]), JSON.stringify(json)));
              }
              
            })];
}

function array(param) {
  var decode = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var match = Js_json.classify(json);
              var exit = 0;
              if (typeof match === "number" || match.tag !== 3) {
                exit = 1;
              } else {
                return Curry._1(param[1], $$Array.map((function (json$prime) {
                                  return Curry._1(decode, /* tuple */[
                                              json$prime,
                                              identity
                                            ]);
                                }), match[0]));
              }
              if (exit === 1) {
                return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "failed to decode json as an array: ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ]),
                                    "failed to decode json as an array: %s"
                                  ]), JSON.stringify(json)));
              }
              
            })];
}

function dict(param) {
  var decode = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var match = Js_json.classify(json);
              var exit = 0;
              if (typeof match === "number" || match.tag !== 2) {
                exit = 1;
              } else {
                return Curry._1(param[1], $$Array.fold_left((function (m, param) {
                                  return Curry._3(Dict[/* add */3], param[0], Curry._1(decode, /* tuple */[
                                                  param[1],
                                                  identity
                                                ]), m);
                                }), Dict[/* empty */0], Js_dict.entries(match[0])));
              }
              if (exit === 1) {
                return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "failed to decode json as a dict: ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ]),
                                    "failed to decode json as a dict: %s"
                                  ]), JSON.stringify(json)));
              }
              
            })];
}

function key_value_pairs(param) {
  var decode = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var match = Js_json.classify(json);
              var exit = 0;
              if (typeof match === "number" || match.tag !== 2) {
                exit = 1;
              } else {
                return Curry._1(param[1], List.map((function (param) {
                                  return /* tuple */[
                                          param[0],
                                          Curry._1(decode, /* tuple */[
                                                param[1],
                                                identity
                                              ])
                                        ];
                                }), $$Array.to_list(Js_dict.entries(match[0]))));
              }
              if (exit === 1) {
                return Pervasives.failwith(Curry._1(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "failed to decode json as key value pairs: ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ]),
                                    "failed to decode json as key value pairs: %s"
                                  ]), JSON.stringify(json)));
              }
              
            })];
}

function field(k, param) {
  var decode = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var fail = function () {
                return Pervasives.failwith(Curry._2(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "failed to decode json field '",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                "': ",
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ]),
                                    "failed to decode json field '%s': %s"
                                  ]), k, JSON.stringify(json)));
              };
              var match = Js_json.classify(json);
              if (typeof match === "number" || match.tag !== 2) {
                return fail(/* () */0);
              } else {
                var match$1 = match[0][k];
                if (match$1 !== undefined) {
                  return Curry._1(param[1], Curry._1(decode, /* tuple */[
                                  match$1,
                                  identity
                                ]));
                } else {
                  return fail(/* () */0);
                }
              }
            })];
}

function at(fields, decoder) {
  return List.fold_right(field, fields, decoder);
}

function index(idx, param) {
  var decode = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var fail = function () {
                return Pervasives.failwith(Curry._2(Printf.sprintf(/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "failed to decode json at index '",
                                        /* Int */Block.__(4, [
                                            /* Int_d */0,
                                            /* No_padding */0,
                                            /* No_precision */0,
                                            /* String_literal */Block.__(11, [
                                                "': ",
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* End_of_format */0
                                                  ])
                                              ])
                                          ])
                                      ]),
                                    "failed to decode json at index '%d': %s"
                                  ]), idx, JSON.stringify(json)));
              };
              var match = Js_json.classify(json);
              if (typeof match === "number" || match.tag !== 3) {
                return fail(/* () */0);
              } else {
                var json$prime;
                try {
                  json$prime = Caml_array.caml_array_get(match[0], idx);
                }
                catch (exn){
                  json$prime = fail(/* () */0);
                }
                return Curry._1(param[1], Curry._1(decode, /* tuple */[
                                json$prime,
                                identity
                              ]));
              }
            })];
}

function succeed(sub_value) {
  return /* Decoder */[(function (param) {
              return Curry._1(param[1], sub_value);
            })];
}

function fail(msg) {
  return /* Decoder */[(function () {
              return Pervasives.failwith(msg);
            })];
}

function and_then(to_d2, param) {
  var d1 = param[0];
  return /* Decoder */[(function (param) {
              var json = param[0];
              var v1 = Curry._1(d1, /* tuple */[
                    json,
                    identity
                  ]);
              var match = Curry._1(to_d2, v1);
              return Curry._1(match[0], /* tuple */[
                          json,
                          param[1]
                        ]);
            })];
}

function and_map(d1, d2) {
  return and_then((function (f) {
                return map(f, d1);
              }), d2);
}

var $pipe$colon = and_map;

exports.Dict = Dict;
exports.decode_string = decode_string;
exports.string = string;
exports.bool = bool;
exports.$$int = $$int;
exports.$$float = $$float;
exports.$$null = $$null;
exports.nullable = nullable;
exports.list = list;
exports.array = array;
exports.dict = dict;
exports.key_value_pairs = key_value_pairs;
exports.field = field;
exports.at = at;
exports.index = index;
exports.optional = optional;
exports.one_of = one_of;
exports.map = map;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.map6 = map6;
exports.map7 = map7;
exports.map8 = map8;
exports.succeed = succeed;
exports.fail = fail;
exports.and_then = and_then;
exports.and_map = and_map;
exports.$pipe$colon = $pipe$colon;
/* Dict Not a pure module */
