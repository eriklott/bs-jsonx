// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Decode$BsJsoncodec = require("../src/decode.bs.js");

describe("Decode", (function () {
        describe("#string", (function () {
                Jest.test("ok on string", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, ["hello"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.string, " \"hello\" ")));
                      }));
                Jest.test("error on bool", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as string: true"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.string, " true ")));
                      }));
                Jest.test("error on int", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as string: 3"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.string, " 3 ")));
                      }));
                Jest.test("error on float", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as string: 3.14"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.string, " 3.14 ")));
                      }));
                Jest.test("error on array", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as string: [\"a\",\"b\",\"c\"]"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.string, " [\"a\", \"b\", \"c\"] ")));
                      }));
                Jest.test("error on object", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as string: {\"name\":\"bob\"}"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.string, " {\"name\":\"bob\"} ")));
                      }));
                return Jest.test("error on null", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as string: null"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.string, " null ")));
                            }));
              }));
        describe("#bool", (function () {
                Jest.test("error on string", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as bool: \"hello\""]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.bool, " \"hello\" ")));
                      }));
                Jest.test("ok on bool", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* true */1]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.bool, " true ")));
                      }));
                Jest.test("error on int", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as bool: 3"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.bool, " 3 ")));
                      }));
                Jest.test("error on float", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as bool: 3.14"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.bool, " 3.14 ")));
                      }));
                Jest.test("error on array", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as bool: [\"a\",\"b\",\"c\"]"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.bool, " [\"a\", \"b\", \"c\"] ")));
                      }));
                Jest.test("error on object", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as bool: {\"name\":\"bob\"}"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.bool, " {\"name\":\"bob\"} ")));
                      }));
                return Jest.test("error on null", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as bool: null"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.bool, " null ")));
                            }));
              }));
        describe("#int", (function () {
                Jest.test("error on string", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as int: \"hello\""]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$int, " \"hello\" ")));
                      }));
                Jest.test("error on bool", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as int: true"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$int, " true ")));
                      }));
                Jest.test("ok on int", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [3]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$int, " 3 ")));
                      }));
                Jest.test("error on float", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as int: 3.14"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$int, " 3.14 ")));
                      }));
                Jest.test("error on array", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as int: [\"a\",\"b\",\"c\"]"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$int, " [\"a\", \"b\", \"c\"] ")));
                      }));
                Jest.test("error on object", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as int: {\"name\":\"bob\"}"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$int, " {\"name\":\"bob\"} ")));
                      }));
                return Jest.test("error on null", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as int: null"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$int, " null ")));
                            }));
              }));
        describe("#float", (function () {
                Jest.test("error on string", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as float: \"hello\""]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$float, " \"hello\" ")));
                      }));
                Jest.test("error on bool", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as float: true"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$float, " true ")));
                      }));
                Jest.test("ok on int", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [3.0]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$float, " 3 ")));
                      }));
                Jest.test("ok on float", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [3.14]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$float, " 3.14 ")));
                      }));
                Jest.test("error on array", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as float: [\"a\",\"b\",\"c\"]"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$float, " [\"a\", \"b\", \"c\"] ")));
                      }));
                Jest.test("error on object", (function () {
                        return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as float: {\"name\":\"bob\"}"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$float, " {\"name\":\"bob\"} ")));
                      }));
                return Jest.test("error on null", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as float: null"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.$$float, " null ")));
                            }));
              }));
        describe("#null", (function () {
                Jest.test("ok on null", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [25]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                              return Decode$BsJsoncodec.$$null(25, param);
                                            }), " null ")));
                      }));
                return Jest.test("error on non-null", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as null: \"hello\""]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.$$null(25, param);
                                                  }), " \"hello\" ")));
                            }));
              }));
        describe("#map", (function () {
                return Jest.test("map to option", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* Some */[25]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.map((function (x) {
                                                                  return /* Some */[x];
                                                                }), Decode$BsJsoncodec.$$int, param);
                                                  }), " 25 ")));
                            }));
              }));
        describe("#map2", (function () {
                return Jest.test("map 2 values", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* tuple */[
                                              "tom",
                                              42
                                            ]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.map2((function (a, b) {
                                                                  return /* tuple */[
                                                                          a,
                                                                          b
                                                                        ];
                                                                }), (function (param) {
                                                                  return Decode$BsJsoncodec.field("name", Decode$BsJsoncodec.string, param);
                                                                }), (function (param) {
                                                                  return Decode$BsJsoncodec.field("age", Decode$BsJsoncodec.$$int, param);
                                                                }), param);
                                                  }), " { \"name\": \"tom\", \"age\": 42 } ")));
                            }));
              }));
        describe("#nullable", (function () {
                Jest.test("decode with value", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* Some */[76]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                              return Decode$BsJsoncodec.nullable(Decode$BsJsoncodec.$$int, param);
                                            }), " 76 ")));
                      }));
                Jest.test("decode with null", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* None */0]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                              return Decode$BsJsoncodec.nullable(Decode$BsJsoncodec.$$int, param);
                                            }), " null ")));
                      }));
                return Jest.test("decode with incorrect value type", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json as int: \"hello\""]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.nullable(Decode$BsJsoncodec.$$int, param);
                                                  }), " \"hello\" ")));
                            }));
              }));
        describe("#list", (function () {
                return Jest.test("decodes to list", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* :: */[
                                              1,
                                              /* :: */[
                                                2,
                                                /* :: */[
                                                  3,
                                                  /* [] */0
                                                ]
                                              ]
                                            ]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.list(Decode$BsJsoncodec.$$int, param);
                                                  }), " [1,2,3] ")));
                            }));
              }));
        describe("#array", (function () {
                return Jest.test("decodes to array", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* int array */[
                                              1,
                                              2,
                                              3
                                            ]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.array(Decode$BsJsoncodec.$$int, param);
                                                  }), " [1,2,3] ")));
                            }));
              }));
        describe("#dict", (function () {
                return Jest.test("decodes to array", (function () {
                              var want = Curry._3(Decode$BsJsoncodec.Dict[/* add */3], "bob", 99, Curry._3(Decode$BsJsoncodec.Dict[/* add */3], "alice", 42, Decode$BsJsoncodec.Dict[/* empty */0]));
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [want]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.dict(Decode$BsJsoncodec.$$int, param);
                                                  }), " { \"alice\": 42, \"bob\": 99 } ")));
                            }));
              }));
        describe("#dict", (function () {
                return Jest.test("decodes to key value list", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* :: */[
                                              /* tuple */[
                                                "alice",
                                                42
                                              ],
                                              /* :: */[
                                                /* tuple */[
                                                  "bob",
                                                  99
                                                ],
                                                /* [] */0
                                              ]
                                            ]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.key_value_pairs(Decode$BsJsoncodec.$$int, param);
                                                  }), " { \"alice\": 42, \"bob\": 99 } ")));
                            }));
              }));
        describe("#field", (function () {
                Jest.test("ok when field exists", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [99]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                              return Decode$BsJsoncodec.field("bob", Decode$BsJsoncodec.$$int, param);
                                            }), " { \"alice\": 42, \"bob\": 99 } ")));
                      }));
                return Jest.test("error when field does not exist", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json field 'frank': {\"alice\":42,\"bob\":99}"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.field("frank", Decode$BsJsoncodec.$$int, param);
                                                  }), " { \"alice\": 42, \"bob\": 99 } ")));
                            }));
              }));
        describe("#at", (function () {
                return Jest.test("ok when field exists", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, ["tom"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(Decode$BsJsoncodec.at(/* :: */[
                                                      "person",
                                                      /* :: */[
                                                        "name",
                                                        /* [] */0
                                                      ]
                                                    ], Decode$BsJsoncodec.string), " { \"person\": { \"name\": \"tom\", \"age\": 42 } } ")));
                            }));
              }));
        describe("#index", (function () {
                Jest.test("ok when element at index exists", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, ["alice"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                              return Decode$BsJsoncodec.index(0, Decode$BsJsoncodec.string, param);
                                            }), " [\"alice\", \"bob\", \"chuck\"] ")));
                      }));
                return Jest.test("error when index is invalid", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failed to decode json at index '99': [\"alice\",\"bob\",\"chuck\"]"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.index(99, Decode$BsJsoncodec.string, param);
                                                  }), " [\"alice\", \"bob\", \"chuck\"] ")));
                            }));
              }));
        describe("#optional", (function () {
                Jest.test("ok when sub-decoder succeeds", (function () {
                        return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* Some */[42]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                              return Decode$BsJsoncodec.optional((function (param) {
                                                            return Decode$BsJsoncodec.field("age", Decode$BsJsoncodec.$$int, param);
                                                          }), param);
                                            }), " { \"name\": \"tom\", \"age\": 42 } ")));
                      }));
                return Jest.test("ok when sub-decoder fails", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* None */0]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.optional((function (param) {
                                                                  return Decode$BsJsoncodec.field("name", Decode$BsJsoncodec.$$int, param);
                                                                }), param);
                                                  }), " { \"name\": \"tom\", \"age\": 42 } ")));
                            }));
              }));
        describe("#succeed", (function () {
                return Jest.test("ok on anything", (function () {
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [42]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.succeed(42, param);
                                                  }), " { \"name\": \"tom\", \"age\": 42 } ")));
                            }));
              }));
        describe("#fail", (function () {
                return Jest.test("error on anything", (function () {
                              return Jest.Expect[/* toEqual */12](/* Error */Block.__(1, ["failure"]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string((function (param) {
                                                    return Decode$BsJsoncodec.fail("failure", param);
                                                  }), " { \"name\": \"tom\", \"age\": 42 } ")));
                            }));
              }));
        describe("#and_then", (function () {
                return Jest.test("complex", (function () {
                              var new_user = function (name, age) {
                                return /* tuple */[
                                        name,
                                        age
                                      ];
                              };
                              var decodr = function (param) {
                                return Decode$BsJsoncodec.and_then((function (f) {
                                              return (function (param) {
                                                  return Decode$BsJsoncodec.map(f, (function (param) {
                                                                return Decode$BsJsoncodec.field("age", Decode$BsJsoncodec.$$int, param);
                                                              }), param);
                                                });
                                            }), (function (param) {
                                              return Decode$BsJsoncodec.and_then((function (f) {
                                                            return (function (param) {
                                                                return Decode$BsJsoncodec.map(f, (function (param) {
                                                                              return Decode$BsJsoncodec.field("name", Decode$BsJsoncodec.string, param);
                                                                            }), param);
                                                              });
                                                          }), (function (param) {
                                                            return Decode$BsJsoncodec.succeed(new_user, param);
                                                          }), param);
                                            }), param);
                              };
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* tuple */[
                                              "tom",
                                              43
                                            ]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(decodr, " { \"name\": \"tom\", \"age\" : 43 } ")));
                            }));
              }));
        describe("#and_map", (function () {
                return Jest.test("maps decoder values to function", (function () {
                              var new_user = function (name, age) {
                                return /* tuple */[
                                        name,
                                        age
                                      ];
                              };
                              var decodr = Decode$BsJsoncodec.and_map((function (param) {
                                      return Decode$BsJsoncodec.field("age", Decode$BsJsoncodec.$$int, param);
                                    }), Decode$BsJsoncodec.and_map((function (param) {
                                          return Decode$BsJsoncodec.field("name", Decode$BsJsoncodec.string, param);
                                        }), (function (param) {
                                          return Decode$BsJsoncodec.succeed(new_user, param);
                                        })));
                              return Jest.Expect[/* toEqual */12](/* Ok */Block.__(0, [/* tuple */[
                                              "tom",
                                              43
                                            ]]), Jest.Expect[/* expect */0](Decode$BsJsoncodec.decode_string(decodr, " { \"name\": \"tom\", \"age\" : 43 } ")));
                            }));
              }));
        return /* () */0;
      }));

/*  Not a pure module */
